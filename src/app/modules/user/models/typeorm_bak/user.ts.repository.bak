/*
+-----------------------------------------------------------------------------------------------------------------------
| Author: atzcl <atzcl0310@gmail.com>  https://github.com/atzcl
+-----------------------------------------------------------------------------------------------------------------------
| UserModel
|
*/

import { providerWrapper } from 'midway';

import { Entity, Column, EntityRepository, getCustomRepository } from 'typeorm';
import { BaseDefaultEntity } from '@my_foundation/bases/base_default_entity';
import { BaseRepository } from '@my_foundation/bases/base_repository';

import Helper from '@app/extend/helper';

/**
  * 调用方式： import { UserRepositoryClass } from '../models/user';
  *          class xxx {
  *              @inject()
  *              userRepository: UserRepositoryClass;
  *           }
  * 然后就正常使用: this.userRepository._create({ username: 'atzcl', password: '123456' })
  **/

// 因为项目使用 migration 来做表的创建，所以这样 column 可以无需定义得很详细
@Entity('users')
export class UserEntity extends BaseDefaultEntity {
  @Column()
  name: string;

  @Column()
  username: string;

  @Column({
    transformer: {
      // setter
      to: (value) => Helper.createBcrypt(value),
      // getter
      from: (value) => value,
    },
  })
  password: string;
}

export const factory = () => getCustomRepository(UserRepositoryClass);
providerWrapper([{ id: 'userRepository', provider: factory }]);

@EntityRepository(UserEntity)
export class UserRepositoryClass extends BaseRepository {
}
