import { EggAppConfig, PowerPartial } from 'midway';

import { uploadImageWhiteList, uploadFileWhiteList, uploadVideoWhiteList, uploadAudioWhiteList } from './upload.config';

// for config.{env}.ts
export type DefaultConfig = PowerPartial<EggAppConfig>;

// 后台路由前缀
export const adminPrefix = 'system';

// 应用的 url 前缀
export const appUrl = 'https://xxx.com';

// 静态资源的 url 集合配置，用于前端拼接完整的资源路径
export const staticUrls = {
  default: appUrl,
};

const mail = {
  host: 'smtp.qq.com', // 地址
  port: 465, // 端口
  secure: true, // TLS 设置
  auth: {
    user: 'xxx@qq.com', // 账号
    pass: 'your', // 密码
  },
}

// 自定义配置/未提供 .d.ts 文件的拓展配置
export const customizeConfig = {
  // 中间件配置
  middleware: ['handleException'],

  // redis 配置 [ 后面如果需要对某一业务进行缓存的时候，可以开启多实例来进行特定储存 ]
  redis: {
    client: {
      host: '127.0.0.1',
      port: 6379,
      password: 'your',
      db: '5',
    },
    agent: true,
  },

  // log 配置
  logrotator: {
    maxFileSize: 2 * 1024 * 1024, // 当文件超过 2G 时进行切割
    maxDays: 31, // 日志保留最大天数
  },

  // sequelize 配置
  sequelize: {
    dialect: 'mysql', // support: mysql, mariadb, postgres, mssql
    database: 'your', // 数据库名称
    host: '127.0.0.1', // 数据库地址
    port: '3306', // 数据库端口
    username: 'root', // 用户名
    password: 'your', // 密码
    // 禁/使用日志; 默认值: console.log
    logging: console.log,
    // 链接数据库时的可选参数
    dialectOptions: {
      charset: 'utf8mb4', // 字符集
      collate: 'utf8mb4_unicode_ci', // 校对集
      // 当在数据库中处理一个大数(BIGINT和DECIMAL)数据类型的时候，你需要启用这个选项(默认: false)
      supportBigNumbers: true,
      // 这个选项需要 bigNumberStrings 与 supportBigNumbers 同时启用
      // 强制把数据库中大数(BIGINT和DECIMAL)数据类型的值转换为 javascript 字符对象串对象返回。(默认:false)
      bigNumberStrings: true,
    },
    // 指定在调用 sequelize.define 时使用的选项
    define: {
      underscored: true, // 字段以下划线（_）来分割（默认是驼峰命名风格）
      charset: 'utf8mb4', // 字符集
    },
    timezone: '+08:00', // 东八时区
  },

  // egg-socket.io 配置
  io: {
    iinit: {
      wsEngine: 'uws', // 使用 uws 来代替默认的 us
    },
    namespace: {
      '/': {
        connectionMiddleware: [],
        packetMiddleware: [],
      },
      '/loginQrCode': {
        connectionMiddleware: [],
        packetMiddleware: [],
      },
    },
    redis: {
      host: '127.0.0.1',
      port: 6379,
      auth_pass: 'your',
      db: 6,
    },
  },

  // egg-jwt 配置
  jwt: {
    secret: 'your', // 密钥
    adminSecret: 'your', // 后台用户的密钥
    enable: true, // 开启
    match: '/jwt', // 白名单

    // jwt 额外配置, 我自己拓展的
    extras: {
      ttl: 2 * 7 * 24, // token 过期时间,单位: 小时
      refresh_ttl: 4 * 7 * 24, // token 可刷新的时间 [失效时间] 单位: 小时
      // iss: 'atzcl', // 令牌的签发者
      // iat: 'iat', // 令牌的发布时间 (unix时间戳）
      // exp: 'exp', // 令牌失效日期 (unix时间戳）
      // nbf: 'nbf', // 令牌从什么时候可用的时间 (unix时间戳)
      // sub: 'sub', // 令牌标识 [ 也就是存放我们自己数据的地方 ]
      // jti: 'jti', // 令牌的唯一标识符 （ sub 和 iat md5 加密后的字符）
    },
  },

  // app 应用设置
  myApp: {
    appName: 'z', // 应用名称
    debug: false, // 是否本地开发环境
    staticUrls, // 静态状态跟域名
    appUrl, // 应用的 url
    adminPrefix, // 后台路由前缀
    language: 'cn', // 当前语言
    languageType: { // 语言列表，配合 language 当前语言来用于后面查询时，可以判断应该输出何种语言的数据
      cn: 0,
      en: 1,
    },

    mail,

    exceptionNotify: {
      enable: false, // 是否打开异常通知
      type: 'dingtalk' as 'dingtalk', // 异常通知类型，wechat 微信； mail 邮件；dingtalk 钉钉：更多...
      wechatOpt: {
        touser: 'xxxxx', // 接收通知的用户 open_id
        templateId: 'xxxxx', // 模板消息的 id
      },
      emailOpt: {
        to: 'xxxxx', // 接收通知的用户邮件地址
        from: mail.auth.user,
      },
    },

    uploadImageWhiteList,
    uploadFileWhiteList,
    uploadVideoWhiteList,
    uploadAudioWhiteList,
    uploadsMaxSizes: {
      image: 1,
      file: 1,
      video: 1,
      audio: 1,
    },
    // 文件上传白名单
    uploadExtWhiteList: [
      ...uploadImageWhiteList,
      ...uploadVideoWhiteList,
      ...uploadFileWhiteList,
      ...uploadAudioWhiteList,
    ],
  },

  // 微信相关配置
  wechat: {
    base_uri: 'https://api.weixin.qq.com/', // 基础 url
    open_platform_base_uri: 'https://api.weixin.qq.com/', // 微信开放平台
    payment_base_uri: 'https://api.mch.weixin.qq.com/', // 微信支付
    open_work_base_uri: 'https://qyapi.weixin.qq.com/', // 企业微信服务商
    work_base_uri: 'https://qyapi.weixin.qq.com/', // 企业微信

    /**
     * 公众号
     */
    official_account: {
      app_id: '',
      secret: '',
      token: '',
      encoding_aes_key: '',
      oauth: {
        scopes: 'snsapi_userinfo',
        callback: '',
      },
    },

    /**
     * 小程序
     */
    mini_program: {
      app_id: 'your',
      secret: 'your',
      token: '',
      encoding_aes_key: '',
    },

    payment: {
      sandbox: false, // 沙箱模式
      app_id: 'your',
      mch_id: 'your',
      key: 'your', // API 密钥
      pfx: '/public/cert/apiclient_cert.p12', // 相对路径
      notify_url: `${appUrl}/orders/notify`, // 默认的订单回调地址
      spbill_create_ip: '127.0.0.1', // IP 地址
      sub_mch_id: '',
      sub_appid: '',
    },
  },

  // 代理
  proxy: true,

  // egg-ejs 配置
  ejs: {},

  // 上传设置
  multipart: {
    fileSize: '500mb',
    // 添加到 whilelist 中
    fileExtensions: ['.apk'],
    /**
     * @description 因为 egg 的 multipart 配置是在应用启动的时候就加载到 egg-multipart 插件的，并且判断格式的方法也是在这时加载到进程中。
     *              所以如果想要在业务代码里面动态限制上传的文件的话，那么只有两种方式可以做到:
     *              1、利用 fileExtensions ,把所有业务需要上传的文件格式都添加上去，然后在业务代码里面获取文件流的时候，再自行进行判断
     *                 但是这样会有一点浪费，毕竟需要验证两次，并且还需要把所有需要上传的文件格式都硬编码到配置中
     *              2、直接把 whitelist 设置为 true, 即允许所有文件通行，然后再自行在业务代码里面做判断
     */
    whitelist: () => true,
    // 白名单
    // whitelist: [
    //   // images
    //   '.jpg',
    //   '.jpeg', // image/jpeg
    //   '.png', // image/png, image/x-png
    //   '.gif', // image/gif
    //   '.bmp', // image/bmp
    //   '.wbmp', // image/vnd.wap.wbmp
    //   '.webp',
    //   '.tif',
    //   '.psd',
    //   // text
    //   '.svg',
    //   '.js', '.jsx',
    //   '.json',
    //   '.css', '.less',
    //   '.html', '.htm',
    //   '.xml',
    //   // tar
    //   '.zip',
    //   '.gz', '.tgz', '.gzip',
    //   // video
    //   '.mp3',
    //   '.mp4',
    //   '.avi',
    // ],
  },
};

export default (appInfo: EggAppConfig) => {
  const config: DefaultConfig = {};

  // use for cookie sign key, should change to your own and keep security
  config.keys = appInfo.name + '_1548739885768_3791';

  // add your config here
  config.middleware = [];

  config.baseDir = appInfo.baseDir;

  // 监听指定文件夹的文件内容变动
  config.development = {
    watchDirs: [
      'app',
      'lib',
      'config',
      'app.ts',
      'agent.ts',
      'interface.ts',
    ],
    overrideDefault: true,
  };

  // 安全配置
  config.security = {
    csrf: {
      enable: false,
    },
  };

  // config.bodyParser = {
  //   jsonLimit: '1mb',
  //   formLimit: '1mb',
  // };

  // egg-view 配置 (内置)
  config.view = {
    defaultViewEngine: 'ejs',
    mapping: {
      '.html': 'ejs',
    },
  };

  return {
    ...config,
    ...customizeConfig,
  };
};
